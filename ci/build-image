#!/usr/bin/env bash
set -euxo pipefail

print_build_arg() {
  printf -- '--build-arg %s=%s ' "$@"
}

print_mpi_versions() {
  version=$1
  case "$version" in
    4.1.4)
      print_build_arg "MPI_VERSION" "4.1.4"
      print_build_arg "MPI_SHA256" "e166dbe876e13a50c2882e11193fecbc4362e89e6e7b6deeb69bf095c0f4fc4c"
      ;;
    *) echo "[${FUNCNAME[0]}] Unknown version $version"; exit 1;
  esac
}

print_ninja_versions() {
  version=$1
  case "$version" in
    1.11.1)
      print_build_arg "NINJA_VERSION" "1.11.1"
      print_build_arg "NINJA_SHA256" "b901ba96e486dce377f9a070ed4ef3f79deb45f4ffe2938f8e7ddc69cfb3df77"
      ;;
    *) echo "[${FUNCNAME[0]}] Unknown version $version"; exit 1;
  esac
}

print_build_versions() {
  version=$1

  case "$version" in
    20230213)
      ;&
    20230209)
      # NOTE: other build tools for which we want to control the version
      # would go there.
      print_build_arg "CMAKE_VERSION" "3.25.2"
      print_build_arg "CMAKE_SHA256" "783da74f132fd1fea91b8236d267efa4df5b91c5eec1dea0a87f0cf233748d99"
      ;;
    *) echo "[${FUNCNAME[0]}] Unknown version $version"; exit 1;
  esac
}

parse_arguments() {
  while read -r tool; do
    read -r tool_version

    case "$tool" in
      build) print_build_versions "$tool_version" ;;
      mpi) print_mpi_versions "$tool_version" ;;
      ninja) print_ninja_versions "$tool_version" ;;
      *) print_build_arg "${tool^^}_VERSION" "${tool_version}" ;;
    esac
  done
}

is_dry_run() {
  if [ "$1" == "--dry-run" ]; then
    echo "yes"
  else
    echo "no"
  fi
}

generate_docker_build_command() {
  build_image_name=$1

  printf -- "docker build "
  # Fill in the command line based on the image tag, and remove its name.
  echo "$build_image_name" | sed 's/.*:\(.*\)/\1/' | tr '-' '\n' | parse_arguments

  # Skip the first argument (the image name), then forward all extra option to
  # the command line.
  shift
  for option in "$@"; do
    if [ $(is_dry_run $option) == "no" ]; then
      printf -- "%s " "$option"
    fi
  done

  # Automatically append the full image as a tag.
  printf -- "-t $build_image_name "

  printf -- ".\\n"
}

dry=false
for option in "$@"; do
  if [ $(is_dry_run $option) == "yes" ]; then
    dry=true
  fi
done

if $dry; then
  printf "$(generate_docker_build_command "$@")\n"
else
  eval "$(generate_docker_build_command "$@")"
fi
