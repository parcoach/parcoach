# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform
import subprocess

import lit.formats

lit_config.load_config(config, '@DEFAULT_LIT_CONFIG@')

# name: The name of this test suite.
config.name = 'MPI'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(True)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.ll', '.c', '.cpp', '.test', '.f90']

config.excludes = ['basic', 'MBI']

# test_source_root: The root path where tests are located.
config.test_source_root = '@CMAKE_CURRENT_SOURCE_DIR@'

# test_exec_root: The root path where tests should be run.
config.test_exec_root = '@CMAKE_CURRENT_BINARY_DIR@'
config.environment['PATH'] = f"@PARCOACH_BIN_PATH@:{config.environment['PATH']}"

config.substitutions.append(('%mpicc', '@MPI_C_COMPILER@'))
config.substitutions.append(('%mpifort', '@MPI_Fortran_COMPILER@ @CMAKE_Fortran_FLAGS@'))
config.substitutions.append(('%mpiexec', '@MPIEXEC_EXECUTABLE@'))
# FIXME: Change the lib when everything has moved to lit.
config.substitutions.append(('%coll_instr_flags', '-L@PARCOACH_LIB_DIR@ -l@PARCOACH_COLL_INSTR_LIB_NAME@'))
config.substitutions.append(('%rma_c_instr_flags', '-L@PARCOACH_LIB_DIR@ -l@PARCOACH_RMA_C_INSTR_LIB_NAME@'))
config.substitutions.append(('%rma_fortran_instr_flags', '-L@PARCOACH_LIB_DIR@ -l@PARCOACH_RMA_Fortran_INSTR_LIB_NAME@'))
config.substitutions.append(('%ld_lib_path', 'LD_LIBRARY_PATH=@PARCOACH_LIB_DIR@:$LD_LIBRARY_PATH'))

# It's not quite possible to detect which MPI library is being used, so just
# setup the CC for known usages.
config.environment['OMPI_CC'] = '@CMAKE_C_COMPILER@'
config.environment['OMPI_FC'] = '@CMAKE_Fortran_COMPILER@'
config.environment['MPICH_CC'] = '@CMAKE_C_COMPILER@'
config.environment['MPICH_FC'] = '@CMAKE_Fortran_COMPILER@'


if @PARCOACH_ENABLE_VALGRIND@:
  config.available_features.add('valgrind')
  config.substitutions.append(('%valgrind', '@VALGRIND_BIN@'))
